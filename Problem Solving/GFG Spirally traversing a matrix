class Solution {
    // Function to return a list of integers denoting spiral traversal of matrix.
    public ArrayList<Integer> spirallyTraverse(int matrix[][]) {
        // code here
         ArrayList<Integer> result = new ArrayList<>();
        
        if (matrix.length == 0) {
            return result; // Return empty if the matrix is empty
        }

        int top = 0; // Starting row
        int bottom = matrix.length - 1; // Ending row
        int left = 0; // Starting column
        int right = matrix[0].length - 1; // Ending column

        while (top <= bottom && left <= right) {
            // Traverse from left to right along the top row
            for (int i = left; i <= right; i++) {
                result.add(matrix[top][i]);
            }
            top++; // Move down to the next row

            // Traverse from top to bottom along the right column
            for (int i = top; i <= bottom; i++) {
                result.add(matrix[i][right]);
            }
            right--; // Move left to the previous column

            // Check if there are remaining rows
            if (top <= bottom) {
                // Traverse from right to left along the bottom row
                for (int i = right; i >= left; i--) {
                    result.add(matrix[bottom][i]);
                }
                bottom--; // Move up to the previous row
            }

            // Check if there are remaining columns
            if (left <= right) {
                // Traverse from bottom to top along the left column
                for (int i = bottom; i >= top; i--) {
                    result.add(matrix[i][left]);
                }
                left++; // Move right to the next column
            }
        }

        return result; // Return the result list
    }
}

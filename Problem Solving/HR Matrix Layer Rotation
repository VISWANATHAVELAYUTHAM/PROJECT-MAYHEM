import java.io.*;
import java.util.*;
import java.util.stream.*;

class Result {

    public static void matrixRotation(List<List<Integer>> matrix, int r) {
        int m = matrix.size();
        int n = matrix.get(0).size();
        int numLayers = Math.min(m, n) / 2;

        for (int layer = 0; layer < numLayers; layer++) {
            List<Integer> elements = extractLayer(matrix, layer, m, n);
            List<Integer> rotated = rotateLayer(elements, r);
            insertLayer(matrix, layer, rotated, m, n);
        }

        printMatrix(matrix);
    }

    private static List<Integer> extractLayer(List<List<Integer>> matrix, int layer, int m, int n) {
        List<Integer> elements = new ArrayList<>();

        // Top row
        for (int i = layer; i < n - layer; i++) {
            elements.add(matrix.get(layer).get(i));
        }

        // Right column
        for (int i = layer + 1; i < m - layer; i++) {
            elements.add(matrix.get(i).get(n - layer - 1));
        }

        // Bottom row
        for (int i = n - layer - 2; i >= layer; i--) {
            elements.add(matrix.get(m - layer - 1).get(i));
        }

        // Left column
        for (int i = m - layer - 2; i > layer; i--) {
            elements.add(matrix.get(i).get(layer));
        }

        return elements;
    }

    private static List<Integer> rotateLayer(List<Integer> elements, int r) {
        int len = elements.size();
        List<Integer> rotated = new ArrayList<>(elements);

        for (int i = 0; i < len; i++) {
            rotated.set((i + len - r % len) % len, elements.get(i));
        }

        return rotated;
    }

    private static void insertLayer(List<List<Integer>> matrix, int layer, List<Integer> rotated, int m, int n) {
        int index = 0;

        // Top row
        for (int i = layer; i < n - layer; i++) {
            matrix.get(layer).set(i, rotated.get(index++));
        }

        // Right column
        for (int i = layer + 1; i < m - layer; i++) {
            matrix.get(i).set(n - layer - 1, rotated.get(index++));
        }

        // Bottom row
        for (int i = n - layer - 2; i >= layer; i--) {
            matrix.get(m - layer - 1).set(i, rotated.get(index++));
        }

        // Left column
        for (int i = m - layer - 2; i > layer; i--) {
            matrix.get(i).set(layer, rotated.get(index++));
        }
    }

    private static void printMatrix(List<List<Integer>> matrix) {
        for (List<Integer> row : matrix) {
            System.out.println(row.stream()
                .map(String::valueOf)
                .collect(Collectors.joining(" ")));
        }
    }
}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));

        String[] firstMultipleInput = bufferedReader.readLine().replaceAll("\\s+$", "").split(" ");

        int m = Integer.parseInt(firstMultipleInput[0]);
        int n = Integer.parseInt(firstMultipleInput[1]);
        int r = Integer.parseInt(firstMultipleInput[2]);

        List<List<Integer>> matrix = new ArrayList<>();

        IntStream.range(0, m).forEach(i -> {
            try {
                matrix.add(
                    Stream.of(bufferedReader.readLine().replaceAll("\\s+$", "").split(" "))
                        .map(Integer::parseInt)
                        .collect(Collectors.toList())
                );
            } catch (IOException ex) {
                throw new RuntimeException(ex);
            }
        });

        Result.matrixRotation(matrix, r);

        bufferedReader.close();
    }
}

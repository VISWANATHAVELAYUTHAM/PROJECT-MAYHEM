class Solution {
    public long countPairs(int[] A, int[] B, long target) {
        long count = 0;
        for (int a : A) {
            if (a > 0) {
                int l = 0, r = B.length - 1;
                while (l <= r) {
                    int m = (l + r) / 2;
                    if ((long)a * B[m] <= target) l = m + 1;
                    else r = m - 1;
                }
                count += l;
            } else if (a < 0) {
                int l = 0, r = B.length - 1;
                while (l <= r) {
                    int m = (l + r) / 2;
                    if ((long)a * B[m] <= target) r = m - 1;
                    else l = m + 1;
                }
                count += B.length - l;
            } else if (target >= 0) {
                count += B.length;
            }
        }
        return count;
    }

    public int kthSmallestProduct(int[] nums1, int[] nums2, int k) {
        Arrays.sort(nums1);
        Arrays.sort(nums2);
        long low = -10000000000L, high = 10000000000L;
        while (low < high) {
            long mid = (low + high) / 2;
            if (countPairs(nums1, nums2, mid) >= k) high = mid;
            else low = mid + 1;
        }
        return (int)low;
    }
}

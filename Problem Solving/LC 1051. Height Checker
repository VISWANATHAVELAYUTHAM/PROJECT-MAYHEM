class Solution {
    
    /*
        Since we need to order integers, and the range of possible integers in input is small, 
		we can use countingSort to improve our ordering time (O(n) instead of O(n * logn)). 
    */
    
    public int heightChecker(int[] heights) {
        final int[] buckets = createBuckets(heights);
        int outOfOrder = 0;
        int nextInBucket = 0;  
        
        for (int i = 0; i < heights.length; i++) {
            nextInBucket = nextValidNumber(buckets, nextInBucket);
            if (heights[i] != nextInBucket)
                outOfOrder++;
            
            buckets[nextInBucket]--;
        }
        
        return outOfOrder;
    }
    
    /*
        Creates the buckets. As an example, if the range was 0 <= num <= 10, and the input was
        [1, 1, 4, 2, 1, 3], then the buckets array would be equal to
        [0, 3, 1, 1, 1, 0, 0, 0, 0, 0, 0], because there are three "1", one "2" and so on.
    */
    private int[] createBuckets(int[] arr) {
        final int[] buckets = new int[101];
        for (int number : arr)
            buckets[number]++;
        
        return buckets;
    }
    
    /*
        Returns the next valid number. For example, if our bucket array is [0, 0, 7, 3, 0, 1], and
        our currentNumber is 0, then it returns 2, since it's the index of the first non-empty bucket.
    */
    private int nextValidNumber(int[] buckets, int currentNumber) {
        while (buckets[currentNumber] == 0)
            currentNumber++;
        
        return currentNumber;
    }
    
}

class Solution {
    // Function to find the vertical width of a Binary Tree.
    public int verticalWidth(Node root) {
        // code here.
        if (root == null) {
        return 0;
    }

        Map<Integer, Integer> map = new HashMap<>();
        Queue<pair> q = new LinkedList<>();
        q.add(new pair(root, 0));
        int ans = 0;
        while (!q.isEmpty()){
            pair p = q.poll();
            Node node = p.node;
            int hd = p.hd;
            if (map.containsKey(hd)) {
                map.put(hd, Math.min(map.get(hd), hd));
            } else{
                map.put(hd, hd);
            }
            if (node.left != null){
                q.add(new pair(node.left, hd-1));
            }
            if (node.right != null){
                q.add(new pair(node.right, hd+1));
            }
        }
        int min = Collections.min(map.values());
        int max = Collections.max(map.values());
        ans = max-min+1;
        return ans;
    }
}

class pair {
    Node node;
    int hd;
    pair(Node node, int hd){
        this.node = node;
        this.hd = hd;
    }
}


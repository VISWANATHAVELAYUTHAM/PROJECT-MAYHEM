import java.util.*;

class Solution {
    public int powerfulInteger(int[][] intervals, int k) {
        TreeMap<Integer, Integer> map = new TreeMap<>();

        // Mark start and end+1 with diff array concept
        for (int[] interval : intervals) {
            map.put(interval[0], map.getOrDefault(interval[0], 0) + 1);
            map.put(interval[1] + 1, map.getOrDefault(interval[1] + 1, 0) - 1);
        }

        int count = 0;
        int prev = -1;
        int result = -1;

        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            int currPoint = entry.getKey();

            if (count >= k && prev != -1) {
                // All points from [prev, currPoint - 1] are powerful
                result = currPoint - 1;  // Take the max powerful point
            }

            count += entry.getValue();
            prev = currPoint;
        }

        return result;
    }
}
